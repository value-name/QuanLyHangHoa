package QLDonHang;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
import com.microsoft.sqlserver.jdbc.SQLServerException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Admin
 */
public class TaoDonHangFrame extends javax.swing.JFrame {

    /**
     * Creates new form QLDonHangFrame
     */
    public TaoDonHangFrame() {
        initComponents();
        loadSanPhamData();

        // Thêm WindowListener để xử lý sự kiện đóng cửa sổ
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Khi cửa sổ bị đóng, chỉ đóng cửa sổ này mà không thoát ứng dụng
                dispose();
            }
        });

        //Tim kiem
        txtTimKiem.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                loadSanPhamData();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                loadSanPhamData();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Not needed for plain text fields
            }
        });

        // Đặt hành động khi nhấn X là đóng cửa sổ này mà không thoát ứng dụng
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    public class DatabaseConnection {

        private static final String server = "localhost";
        private static final String user = "sa";
        private static final String password = "123456";
        private static final String db = "QUANLY";
        private static final int port = 1433;

        public static Connection getConnection() throws SQLServerException {
            SQLServerDataSource ds = new SQLServerDataSource();
            ds.setUser(user);
            ds.setPassword(password);
            ds.setDatabaseName(db);
            ds.setPortNumber(port);
            ds.setServerName(server);
            ds.setEncrypt(false);
            return ds.getConnection();
        }
    }

    private void loadSanPhamData() {
        DefaultTableModel model = (DefaultTableModel) tableSPTr.getModel();
        model.setRowCount(0); // Xóa các hàng cũ trong bảng

        // Lấy từ khóa tìm kiếm từ ô txtTimKiem
        String searchTerm = txtTimKiem.getText().trim();

        // Thêm điều kiện tìm kiếm vào câu truy vấn nếu có từ khóa
        String query = "SELECT MaSanPham, TenSanPham, GiaBan, SoLuongTon FROM SanPham";
        if (!searchTerm.isEmpty()) {
            query += " WHERE TenSanPham LIKE ?";
        }

        try (Connection conn = DatabaseConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {

            // Thiết lập giá trị cho câu truy vấn nếu có từ khóa tìm kiếm
            if (!searchTerm.isEmpty()) {
                stmt.setString(1, "%" + searchTerm + "%");
            }

            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("MaSanPham"),
                    rs.getString("TenSanPham"),
                    rs.getDouble("GiaBan"),
                    rs.getInt("SoLuongTon")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTongTien() {
        double tongTien = 0;
        DefaultTableModel model = (DefaultTableModel) tableSPSau.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            tongTien += (double) model.getValueAt(i, 4); // Cộng tổng tiền từ cột tổng tiền
        }
        jpnTongTien.setText(tongTien + " đ");  // Hiển thị tổng tiền trên giao diện
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnLamMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSPTr = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtMaDonHang = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSuaSoLuong = new javax.swing.JTextField();
        btnThemSoLuong = new javax.swing.JButton();
        btnSuaSoLuong = new javax.swing.JButton();
        btnXoaSanPham = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jpnTongTien = new javax.swing.JLabel();
        btnTaoDon = new javax.swing.JButton();
        cbxPhuongThuc = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSPSau = new javax.swing.JTable();
        txtSoLuong = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_reset_25px_1.png"))); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnLamMoi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLamMoi))
                .addGap(20, 20, 20))
        );

        tableSPTr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Giá tiền", "Số lượng tồn"
            }
        ));
        jScrollPane1.setViewportView(tableSPTr);

        jLabel1.setText("Mã đơn hàng");

        jLabel2.setText("Số lượng :");

        txtSuaSoLuong.setText("1");

        btnThemSoLuong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_add_25px_5.png"))); // NOI18N
        btnThemSoLuong.setText("Thêm");
        btnThemSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSoLuongActionPerformed(evt);
            }
        });

        btnSuaSoLuong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_edit_25px.png"))); // NOI18N
        btnSuaSoLuong.setText("Sửa số lượng");
        btnSuaSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSoLuongActionPerformed(evt);
            }
        });

        btnXoaSanPham.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_delete_25px_1.png"))); // NOI18N
        btnXoaSanPham.setText("Xoá sản phẩm");
        btnXoaSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaSanPhamActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Tổng tiền :");

        jpnTongTien.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jpnTongTien.setForeground(new java.awt.Color(255, 0, 0));
        jpnTongTien.setText("0 đ");

        btnTaoDon.setText("Tạo đơn hàng");
        btnTaoDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoDonActionPerformed(evt);
            }
        });

        cbxPhuongThuc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tiền mặt", "Chuyển khoản" }));

        jLabel5.setText("Phương thức thanh toán");

        tableSPSau.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Giá tiền", "Số lượng", "Tổng tiền"
            }
        ));
        jScrollPane3.setViewportView(tableSPSau);

        txtSoLuong.setText("1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addComponent(txtMaDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxPhuongThuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnThemSoLuong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSuaSoLuong)
                .addGap(5, 5, 5)
                .addComponent(txtSuaSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXoaSanPham)
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jpnTongTien)
                .addGap(32, 32, 32)
                .addComponent(btnTaoDon, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxPhuongThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(btnThemSoLuong)
                        .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSuaSoLuong)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnXoaSanPham)
                        .addComponent(txtSuaSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 25, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jpnTongTien)))
                    .addComponent(btnTaoDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnSuaSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSoLuongActionPerformed
        // TODO add your handling code here:
        try {
            // Kiểm tra nếu người dùng đã chọn sản phẩm trong giỏ hàng
            int selectedRow = tableSPSau.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Lấy thông tin sản phẩm trong giỏ hàng
            String maSanPham = (String) tableSPSau.getValueAt(selectedRow, 0);
            double giaBan = (double) tableSPSau.getValueAt(selectedRow, 2);
            int soLuongTon = 0;

            // Tìm số lượng tồn của sản phẩm trong bảng SPTr (bảng sản phẩm)
            DefaultTableModel modelSPTr = (DefaultTableModel) tableSPTr.getModel();
            for (int i = 0; i < modelSPTr.getRowCount(); i++) {
                String maSanPhamTr = (String) modelSPTr.getValueAt(i, 0);
                if (maSanPham.equals(maSanPhamTr)) {
                    soLuongTon = (int) modelSPTr.getValueAt(i, 3); // Giả sử cột 3 là số lượng tồn
                    break;
                }
            }

            // Lấy số lượng sửa từ ô nhập liệu
            int soLuongMoi = Integer.parseInt(txtSuaSoLuong.getText().trim());
            if (soLuongMoi <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải là một số dương!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Kiểm tra số lượng nhập vào không vượt quá số lượng tồn
            if (soLuongMoi > soLuongTon) {
                JOptionPane.showMessageDialog(this, "Số lượng yêu cầu vượt quá số lượng có sẵn trong kho!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Cập nhật lại số lượng và tổng tiền cho sản phẩm
            tableSPSau.setValueAt(soLuongMoi, selectedRow, 3); // Cập nhật số lượng
            double tongTien = giaBan * soLuongMoi; // Tính lại tổng tiền cho sản phẩm
            tableSPSau.setValueAt(tongTien, selectedRow, 4); // Cập nhật tổng tiền

            // Cập nhật lại tổng tiền giỏ hàng
            updateTongTien();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng hợp lệ!", "Lỗi nhập liệu", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi sửa số lượng!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSuaSoLuongActionPerformed

    private void btnTaoDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoDonActionPerformed
        // TODO add your handling code here:
        try {
            String maDonHang = txtMaDonHang.getText();
            if (maDonHang.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập mã đơn hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Kiểm tra mã đơn hàng đã tồn tại hay chưa
            String checkMaDonHang = "SELECT COUNT(*) FROM DonHang WHERE MaDonHang = ?";
            try (Connection conn = DatabaseConnection.getConnection(); PreparedStatement stmtCheck = conn.prepareStatement(checkMaDonHang)) {

                stmtCheck.setString(1, maDonHang);
                ResultSet rs = stmtCheck.executeQuery();
                if (rs.next()) {
                    int count = rs.getInt(1);
                    if (count > 0) {
                        JOptionPane.showMessageDialog(this, "Mã đơn hàng đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        return; // Dừng lại nếu mã đơn hàng đã tồn tại
                    }
                }
            }

            double tongTien = Double.parseDouble(jpnTongTien.getText().replace(" đ", ""));
            if (tongTien == 0) {
                JOptionPane.showMessageDialog(this, "Tổng tiền không thể bằng 0!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String phuongThuc = cbxPhuongThuc.getSelectedItem().toString();
            String trangThai = "Đang xử lý"; // Đặt trạng thái đơn hàng là "Đang xử lý"
            String insertDonHang = "INSERT INTO DonHang (MaDonHang, NgayGiaoDich, TongTien, PhuongThucThanhToan, TrangThaiDonHang) VALUES (?, GETDATE(), ?, ?, ?)";
            String insertChiTiet = "INSERT INTO ChiTietDonHang (MaChiTietDonHang, MaDonHang, MaSanPham, SoLuong, DonGia, TongTien) VALUES (?, ?, ?, ?, ?, ?)";
            String updateSanPham = "UPDATE SanPham SET SoLuongTon = SoLuongTon - ? WHERE MaSanPham = ?"; // Truy vấn cập nhật số lượng tồn

            try (Connection conn = DatabaseConnection.getConnection(); PreparedStatement stmtDonHang = conn.prepareStatement(insertDonHang); PreparedStatement stmtChiTiet = conn.prepareStatement(insertChiTiet); PreparedStatement stmtUpdateSanPham = conn.prepareStatement(updateSanPham)) {

                conn.setAutoCommit(false); // Bắt đầu transaction

                // Thêm đơn hàng vào bảng DonHang
                stmtDonHang.setString(1, maDonHang);
                stmtDonHang.setDouble(2, tongTien);
                stmtDonHang.setString(3, phuongThuc);
                stmtDonHang.setString(4, trangThai); // Thêm trạng thái đơn hàng vào truy vấn
                stmtDonHang.executeUpdate();

                // Lặp qua từng sản phẩm trong giỏ hàng và thêm vào bảng ChiTietDonHang
                DefaultTableModel model = (DefaultTableModel) tableSPSau.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    String maSanPham = (String) model.getValueAt(i, 0);
                    int soLuong = (int) model.getValueAt(i, 3);
                    double donGia = (double) model.getValueAt(i, 2);
                    double tongTienSP = (double) model.getValueAt(i, 4);

                    // Tạo mã chi tiết đơn hàng duy nhất
                    String maChiTietDonHang = maDonHang + "-CT" + (i + 1);  // MaDonHang + CT + chỉ số (đảm bảo duy nhất)

                    // Thêm chi tiết đơn hàng vào bảng ChiTietDonHang
                    stmtChiTiet.setString(1, maChiTietDonHang); // Mã chi tiết đơn hàng duy nhất
                    stmtChiTiet.setString(2, maDonHang);
                    stmtChiTiet.setString(3, maSanPham);
                    stmtChiTiet.setInt(4, soLuong);
                    stmtChiTiet.setDouble(5, donGia);
                    stmtChiTiet.setDouble(6, tongTienSP);
                    stmtChiTiet.addBatch();

                    // Cập nhật số lượng tồn trong bảng SanPham
                    stmtUpdateSanPham.setInt(1, soLuong); // Số lượng đã bán
                    stmtUpdateSanPham.setString(2, maSanPham);
                    stmtUpdateSanPham.addBatch();
                }

                // Thực hiện tất cả các truy vấn (insert và update)
                stmtChiTiet.executeBatch();
                stmtUpdateSanPham.executeBatch();

                // Commit transaction
                conn.commit();

                JOptionPane.showMessageDialog(this, "Tạo đơn hàng thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                // Reset bảng SPTr (xóa hết các dòng)
                DefaultTableModel spTrModel = (DefaultTableModel) tableSPTr.getModel();
                spTrModel.setRowCount(0);  // Reset bảng (xóa hết dữ liệu)

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi tạo đơn hàng!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTaoDonActionPerformed

    private void btnThemSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSoLuongActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = tableSPTr.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Lấy thông tin sản phẩm từ bảng SPTr
            String maSanPham = (String) tableSPTr.getValueAt(selectedRow, 0);
            String tenSanPham = (String) tableSPTr.getValueAt(selectedRow, 1);
            double giaBan = (double) tableSPTr.getValueAt(selectedRow, 2);
            int soLuongTon = (int) tableSPTr.getValueAt(selectedRow, 3); // Lấy số lượng có sẵn từ bảng SPTr

            // Lấy số lượng sản phẩm từ ô nhập liệu
            int soLuong = Integer.parseInt(txtSoLuong.getText().trim());  // Kiểm tra đảm bảo là số
            if (soLuong <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải là một số dương!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Kiểm tra số lượng nhập vào không vượt quá số lượng có sẵn
            if (soLuong > soLuongTon) {
                JOptionPane.showMessageDialog(this, "Số lượng yêu cầu vượt quá số lượng có sẵn trong kho!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Tính tổng tiền
            double tongTien = giaBan * soLuong;

            // Kiểm tra xem sản phẩm đã có trong bảng chưa
            DefaultTableModel model = (DefaultTableModel) tableSPSau.getModel();
            boolean exists = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (maSanPham.equals(model.getValueAt(i, 0))) {
                    // Cập nhật số lượng và tính lại tổng tiền cho sản phẩm đã có
                    int existingQuantity = (int) model.getValueAt(i, 3);
                    double existingTotalPrice = (double) model.getValueAt(i, 4);
                    int newQuantity = existingQuantity + soLuong;
                    double newTotalPrice = giaBan * newQuantity;

                    // Cập nhật lại dòng trong bảng
                    model.setValueAt(newQuantity, i, 3);
                    model.setValueAt(newTotalPrice, i, 4);
                    updateTongTien();  // Cập nhật lại tổng tiền sau khi thêm
                    exists = true;
                    break;
                }
            }

            // Nếu sản phẩm chưa có, thêm vào bảng
            if (!exists) {
                model.addRow(new Object[]{maSanPham, tenSanPham, giaBan, soLuong, tongTien});
                updateTongTien();  // Cập nhật tổng tiền sau khi thêm
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng hợp lệ!", "Lỗi nhập liệu", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi thêm sản phẩm!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnThemSoLuongActionPerformed

    private void btnXoaSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaSanPhamActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableSPSau.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) tableSPSau.getModel();
            model.removeRow(selectedRow);
            updateTongTien(); // Cập nhật tổng tiền sau khi xóa
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaSanPhamActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        txtTimKiem.setText("");
        loadSanPhamData();
        
    }//GEN-LAST:event_btnLamMoiActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnSuaSoLuong;
    private javax.swing.JButton btnTaoDon;
    private javax.swing.JButton btnThemSoLuong;
    private javax.swing.JButton btnXoaSanPham;
    private javax.swing.JComboBox<String> cbxPhuongThuc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jpnTongTien;
    private javax.swing.JTable tableSPSau;
    private javax.swing.JTable tableSPTr;
    private javax.swing.JTextField txtMaDonHang;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtSuaSoLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
